buildscript {

    apply from: 'gradle/versions.gradle'

    repositories {
        mavenCentral()
        maven { url 'https://jetbrains.jfrog.io/jetbrains/spek-snapshots' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.jetbrains.kotlin"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$versions.junitrunner"
    }

}

plugins {
    id 'com.github.kt3k.coveralls' version '2.12.0'
    id 'com.github.ben-manes.versions' version '0.41.0'
}

apply plugin: 'jacoco'
apply plugin: 'idea'

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

project.ext {
    artifactGroup = "com.jdiazcano.cfg4k"
    artifactVersion = "0.9.5"
}

repositories {
    mavenCentral()
}

subprojects { p ->
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'jacoco'
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: "maven-publish"

    sourceCompatibility = 1.8

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://jetbrains.jfrog.io/jetbrains/spek-snapshots' }
    }

    // custom tasks for creating source/javadoc jars
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    // add javadoc/source jar tasks as artifacts
    artifacts {
        archives sourcesJar, javadocJar
    }

    publishing {
        publications {
            kotlinPublish(MavenPublication) {
                from components.java
                groupId 'com.jdiazcano.cfg4k'
                artifactId p.name
                version project.artifactVersion

                artifact sourcesJar
                artifact javadocJar
            }
        }
    }

    // Needed because there's something messy with kotlin version numbers and dependencies
    configurations.all {
        resolutionStrategy {
            eachDependency { DependencyResolveDetails details ->
                if (details.requested.group == 'org.jetbrains.kotlin') {
                    details.useVersion "$versions.jetbrains.kotlin"
                }
            }
        }
    }
}

def activeSubprojects = subprojects.findAll { it.name.startsWith("cfg4k") }
def subprojectsExecFiles = files( activeSubprojects.collect { "${it.name}/build/jacoco/junitPlatformTest.exec" } )

task publishLocal(dependsOn: activeSubprojects.collect { it.tasks.findByPath("publishToMavenLocal") }) {}
