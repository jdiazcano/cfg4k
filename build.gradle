buildscript {

    ext {
        kotlin_version = '1.1-M03'
        artifactGroup = "com.jdiazcano.konfig"
        artifactVersion = "0.2"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://jetbrains.jfrog.io/jetbrains/spek-snapshots' }
        maven { url "http://dl.bintray.com/kotlin/kotlin-eap-1.1" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M3'
    }

}

plugins {
    id 'com.github.kt3k.coveralls' version '2.7.1'
}

apply plugin: 'jacoco'

repositories {
    mavenCentral()
}

// Generate Gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = "3.3"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'jacoco'
    apply plugin: 'org.junit.platform.gradle.plugin'

    sourceCompatibility = 1.8

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://jetbrains.jfrog.io/jetbrains/spek-snapshots' }
        maven { url "http://dl.bintray.com/kotlin/kotlin-eap-1.1" }
    }

    project.afterEvaluate {
        def junitPlatformTestTask = project.tasks.getByName('junitPlatformTest')

        jacoco {
            toolVersion = "+"
            reportsDir = file("$buildDir/reports/jacoco")
            applyTo junitPlatformTestTask
        }

        project.task(type: JacocoReport, "junitPlatformJacocoReport", {
            sourceDirectories = files("src/main/kotlin")
            classDirectories = files("$buildDir/classes/main")
            reports {
                xml.enabled = true
                html.enabled = true
                xml.destination "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
                html.destination "${buildDir}/reports/jacoco/test/jacocoTestReport.html"
            }
            executionData junitPlatformTestTask
        })
    }

    coveralls {
        sourceDirs += ['src/main/kotlin']
    }
}

def activeSubprojects = subprojects.findAll { it.name.startsWith("cfg4k") }

task junitTest(dependsOn: [
        ":cfg4k-core:junitPlatformTest",
        ":cfg4k-bytebuddy:junitPlatformTest",
        ":cfg4k-hocon:junitPlatformTest"
])
task report(dependsOn: [
        ":cfg4k-core:junitPlatformJacocoReport",
        ":cfg4k-bytebuddy:junitPlatformJacocoReport",
        ":cfg4k-hocon:junitPlatformJacocoReport"
])

task jacocoRootReport(type: JacocoReport) {
    additionalSourceDirs = files(activeSubprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(activeSubprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(activeSubprojects.sourceSets.main.output)
    executionData = files(
            "cfg4k-core/build/jacoco/junitPlatformTest.exec",
            "cfg4k-bytebuddy/build/jacoco/junitPlatformTest.exec", // needed because the default name is test.exec instead :(
            "cfg4k-hocon/build/jacoco/junitPlatformTest.exec"
    )
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }

}

coveralls {
    sourceDirs = activeSubprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}